#!/bin/bash

# hc-host-assemble host-bitcode host-object (options)

# enable bash debugging
KMDBSCRIPT="${KMDBSCRIPT:=0}"

# dump the LLVM bitcode
KMDUMPLLVM="${KMDUMPLLVM:=0}"

# force -mcmodel
HCC_HOST_CODE_MODEL="${HCC_HOST_CODE_MODEL:=0}"

if [ $KMDBSCRIPT == "1" ]
then
  set -x
fi

BINDIR=$(dirname "$0")
CLANG=$BINDIR/hcc
OPT=$BINDIR/opt
LLVM_AS=$BINDIR/llvm-as
LLVM_DIS=$BINDIR/llvm-dis
LIBPATH=$BINDIR/../lib

if [ "$#" -lt 2 ]; then
  echo "Usage: $0 kernel-bitcode object (options)" >&2
  exit 1
fi

if [ ! -f "$1" ]; then
  echo "kernel-bitcode $1 is not valid" >&2
  exit 1
fi

if [ $KMDUMPLLVM == "1" ]; then
  cp $1 ./dump.host-assemble.bc
fi

CXXFLAGS=

# env var to add code model option
if [ $HCC_HOST_CODE_MODEL == "1" ]; then
  CXXFLAGS="$CXXFLAGS -mcmodel=small "
elif [ $HCC_HOST_CODE_MODEL == "2" ]; then
  CXXFLAGS="$CXXFLAGS -mcmodel=medium "
elif [ $HCC_HOST_CODE_MODEL == "3" ]; then
  CXXFLAGS="$CXXFLAGS -mcmodel=large "
fi

# Pass down compiler options
if [ "$#" -ge 2 ]; then
  num=2
  while [ $num -lt $# ]
  do
    (( num++ ))
    ARG="${!num}"
    CXXFLAGS=$CXXFLAGS' '"\"$ARG\""
  done
fi

CO="-c -o"

ln -s "$1" "$1.bc"
eval "$CLANG $CXXFLAGS \"$1.bc\" $CO \"$2\" "
